import os
import json
import base64
from io import StringIO
import openai
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# ‚úÖ Decodificar credenciais do Google Sheets
credentials_b64 = os.getenv("GSHEETS_KEY_B64")
if not credentials_b64:
    raise ValueError("‚ùå GSHEETS_KEY_B64 n√£o est√° definido. Verifique os GitHub Secrets.")

try:
    credentials_json = base64.b64decode(credentials_b64).decode("utf-8")
    credentials_dict = json.loads(credentials_json)
except Exception as e:
    raise ValueError(f"‚ùå Erro ao decodificar GSHEETS_KEY_B64: {e}")

# ‚úÖ Autenticar com Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(credentials_dict, scope)
client = gspread.authorize(creds)
sheet = client.open("HubspotIA").sheet1
dados = sheet.get_all_records()

# ‚úÖ Configurar cliente da OpenAI
client_oai = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ‚úÖ Localizar colunas
header = sheet.row_values(1)
col_resumo = header.index("Resumo") + 1
col_prompt = header.index("Prompt personalizado") + 1 if "Prompt personalizado" in header else len(header) + 1
if "Prompt personalizado" not in header:
    sheet.update_cell(1, col_prompt, "Prompt personalizado")

# ‚úÖ Processar cada linha
for i, row in enumerate(dados, start=2):
    resumo = row.get("Resumo", "").strip()
    prompt_personalizado = row.get("Prompt personalizado", "").strip()

    if not resumo:
        print(f"‚ö†Ô∏è Linha {i} ignorada: sem resumo.")
        continue
    if prompt_personalizado:
        print(f"‚è© Linha {i} j√° processada.")
        continue
    if len(resumo) < 50:
        print(f"‚ö†Ô∏è Linha {i} ignorada: resumo muito curto.")
        continue

    print(f"\nüí¨ Gerando post para linha {i}...")
    print(f"üìù Resumo inicial: {resumo[:80]}{'...' if len(resumo) > 80 else ''}")

    mensagem_usuario = "\n".join([
        "Crie um post para LinkedIn com tom provocador e autoridade t√©cnica sobre o tema.",
        "",
        "Resumo do artigo:",
        f'"{resumo}"',
        "",
        "O texto deve:",
        "‚Äì Come√ßar com uma frase que aponte um erro comum no mercado",
        "‚Äì Mostrar o contraste entre a pr√°tica superficial e a pr√°tica correta",
        "‚Äì Incluir um exemplo real (ou simulado) que mostre como isso se aplica na pr√°tica",
        "‚Äì Terminar com uma provoca√ß√£o aberta, convidando ao debate",
        "",
        "O post deve ser direto, com frases curtas, e ter o tom de algu√©m que j√° viveu isso na pele ‚Äî n√£o de quem est√° repetindo buzzwords.",
        "Use no m√°ximo 1.300 caracteres e inclua hashtags espec√≠ficas no final."
    ])

    try:
        response = client_oai.chat.completions.create(
            model="gpt-3.5-turbo",  # ou "gpt-4o" se quiser qualidade m√°xima
            messages=[
                {"role": "system", "content": "Voc√™ √© um estrategista de marketing experiente e direto."},
                {"role": "user", "content": mensagem_usuario}
            ],
            temperature=0.7,
            max_tokens=500
        )
        texto = response.choices[0].message.content.strip()
        sheet.update_cell(i, col_prompt, texto)
        print(f"‚úÖ Post adicionado na linha {i}.")

    except openai.APIError as e:
        print(f"üö® API Error na linha {i}: {e}")
    except openai.RateLimitError:
        print(f"‚è≥ Rate limit atingido na linha {i}, tente novamente mais tarde.")
    except Exception as e:
        print(f"‚ùå Erro inesperado na linha {i}: {e}")
